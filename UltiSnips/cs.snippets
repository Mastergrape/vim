snippet sim
public static int Main(string[] args) {
	${1}
	return 0;
 } 
endsnippet

snippet simc
public class $1 {
  public static int Main(string[] args) {
    $2
    return 0;
  }
}
endsnippet

snippet if
if (${1}) {
  ${2}
} 
endsnippet

snippet el
else {
  ${1}
} 
endsnippet

snippet ifs
if (${1}) 
  ${2}
endsnippet

snippet t
${1} ? ${2} : ${3}
endsnippet

snippet ?
${1} ? ${2} : ${3}
endsnippet

snippet do
do {
  ${2}
} while (${1});
endsnippet

snippet wh
while (${1}) {
  ${2}
}
endsnippet

snippet for
for (int ${1:i} = 0; $1 < ${2:count}; $1${3:++}) {
  ${4}
}
endsnippet

snippet fore
foreach (var ${1:entry} in ${2}) {
  ${3}
}
endsnippet

snippet foreach
foreach (var ${1:entry} in ${2}) {
  ${3}
}
endsnippet

snippet each
foreach (var ${1:entry} in ${2}) {
  ${3}
}
endsnippet

snippet interface
public interface ${1:`Filename()`} {
  ${2}
}
endsnippet

snippet if+
public interface ${1:`Filename()`} {
  ${2}
}
endsnippet

snippet class
public class ${1:`Filename()`} {
  ${2}
}
endsnippet

snippet cls
${2:public} class ${1:`Filename()`} {
  ${3}
}
endsnippet

snippet cls+
public class ${1:`Filename()`} {
  ${2}
}
endsnippet

snippet cls+^
public static class ${1:`Filename()`} {
  ${2}
}
endsnippet

snippet cls&
internal class ${1:`Filename()`} {
  ${2}
}
endsnippet

snippet cls&^
internal static class ${1:`Filename()`} {
  ${2}
}
endsnippet

snippet cls|
protected class ${1:`Filename()`} {
  ${2}
}
endsnippet

snippet cls|%
protected abstract class ${1:`Filename()`} {
  ${2}
}
endsnippet

snippet ctor
public ${1:`Filename()`}() {
  ${2}
}
endsnippet

snippet prop
${1:public} ${2:int} ${3:} { get; set; }${4}
endsnippet

snippet p
${1:public} ${2:int} ${3:} { get; set; }${4}
endsnippet

snippet m
${1:public} ${2:void} ${3:}(${4:}) {
  ${5:}
}
endsnippet

snippet struct
public struct ${1:`Filename()`} {
  ${2}
}
endsnippet

snippet enum
public enum ${1} {
  ${2}
}
endsnippet

snippet #if
#if
  ${1}
#endif
# inline xml documentation
endsnippet

snippet ///
/// <summary>
/// ${1}
/// </summary>
endsnippet

snippet <p
<param name="${1}">${2:$1}</param>${3}
endsnippet

snippet <ex
<exception cref="${1:System.Exception}">${2}</exception>${3}
endsnippet

snippet <r
<returns>${1}</returns>{${2}
endsnippet

snippet <s
<see cref="${1}"/>${2}
endsnippet

snippet <rem
<remarks>${1}</remarks>${2}
endsnippet

snippet <c
<code>${1}</code>${2}
endsnippet
