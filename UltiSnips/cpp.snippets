extends c

# Casts.
#
snippet static "Static cast" w
static_cast<$1>(${2:${VISUAL}})
endsnippet

snippet qoc "QObject cast" w
qobject_cast<$1>(${2:${VISUAL}})
endsnippet

# Casts
snippet cast "Static Cast"
static_cast<${1}>(${2})${3}
endsnippet

snippet cast "Reinterpret Cast"
reinterpret_cast<${1}>(${2})${3}
endsnippet

snippet cast "Dynamic Cast"
dynamic_cast<${1}>(${2})${3}
endsnippet

snippet cast "Const Cast"
const_cast<${1}>(${2})${3}
endsnippet

snippet ifhack "Run-time debug option"
static bool hack = false;
if (hack)
{
${1}
}${2}
endsnippet

# Pragmas for MSVC
snippet opt "Unoptimize region start"
#pragma optimize( "", off )${1}
endsnippet

snippet opt "Unoptimize region end"
#pragma optimize( "", on )${1}
endsnippet

snippet readfile "read file into vector"
std::vector<char> v;
if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
char buf[1024];
while (size_t len = fread(buf, 1, sizeof(buf), $2))
v.insert(v.end(), buf, buf + len);
fclose($2);
}${3}
endsnippet

snippet dtor "destructor"
virtual ~${1:`!v Filename('', 'classname')`}();${2}
endsnippet

## STL Collections
# std::array
snippet array
std::array<${1:T}, ${2:N}> ${3};${4}
endsnippet
# std::vector
snippet vector
std::vector<${1:T}> ${2};${3}
endsnippet
# std::deque
snippet deque
std::deque<${1:T}> ${2};${3}
endsnippet
# std::forward_list
snippet flist
std::forward_list<${1:T}> ${2};${3}
endsnippet
# std::list
snippet list
std::list<${1:T}> ${2};${3}
endsnippet
# std::set
snippet set
std::set<${1:T}> ${2};${3}
endsnippet
# std::map
snippet map
std::map<${1:Key}, ${2:T}> ${3};${4}
endsnippet
# std::multiset
snippet mset
std::multiset<${1:T}> ${2};${3}
endsnippet
# std::multimap
snippet mmap
std::multimap<${1:Key}, ${2:T}> ${3};${4}
endsnippet
# std::unordered_set
snippet uset
std::unordered_set<${1:T}> ${2};${3}
endsnippet
# std::unordered_map
snippet umap
std::unordered_map<${1:Key}, ${2:T}> ${3};${4}
endsnippet
# std::unordered_multiset
snippet umset
std::unordered_multiset<${1:T}> ${2};${3}
endsnippet
# std::unordered_multimap
snippet ummap
std::unordered_multimap<${1:Key}, ${2:T}> ${3};${4}
endsnippet
# std::stack
snippet stack
std::stack<${1:T}> ${2};${3}
endsnippet
# std::queue
snippet queue
std::queue<${1:T}> ${2};${3}
endsnippet
# std::priority_queue
snippet pqueue
std::priority_queue<${1:T}> ${2};${3}
endsnippet
##
## Access Modifiers
# private
snippet pri
private
endsnippet
# protected
snippet pro
protected
endsnippet
# public
snippet pub
public
endsnippet
# friend
snippet fr
friend
endsnippet
# mutable
snippet mu
mutable
endsnippet
## 
## Class
# class
snippet class "class"
class ${1:`!v Filename('$1', 'name')`}
{
	private:
		${4:/* data */}
	public:
		$1(${2});
		${3:virtual }~$1();
};
endsnippet
# member function implementation
snippet mfun "member function implementations"
${4:void} ${1:`!v Filename('$1', 'ClassName')`}::${2:${VISUAL:memberFunction}}(${3}) {
	${5:return};
}
endsnippet
# namespace
snippet ns "Namespace"
namespace ${1:`!v Filename('', 'my')`} {
	${2}
} /* namespace $1 */
endsnippet
##
## Input/Output
# std::cout
snippet cout
std::cout << ${1} << std::endl;${2}
endsnippet
# std::cin
snippet cin
std::cin >> ${1};${2}
endsnippet
##
## Iteration
# for i 
snippet fori
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4:/* code */}
}${5}
endsnippet

# foreach
snippet fore
for (${1:auto} ${2:i} : ${3:container}) {
	${4:/* code */}
}${5}
endsnippet
# iterator
snippet iter
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
	${6}
}${7}
endsnippet

# auto iterator
snippet itera
for (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {
	${2:std::cout << *$1 << std::endl;}
}${3}
endsnippet
##
## Lambdas
# lamda (one line)
snippet ld
[${1}](${2}){${3:/* code */}}${4}
endsnippet
# lambda (multi-line)
snippet lld
[${1}](${2}){
	${3:/* code */}
}${4}
endsnippet

